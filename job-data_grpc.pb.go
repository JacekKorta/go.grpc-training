// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: job-data.proto

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobDataSrvClient is the client API for JobDataSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobDataSrvClient interface {
	Count(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*CountResponse, error)
	GetSalaryDataBySeniority(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*SalaryResponse, error)
}

type jobDataSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewJobDataSrvClient(cc grpc.ClientConnInterface) JobDataSrvClient {
	return &jobDataSrvClient{cc}
}

func (c *jobDataSrvClient) Count(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/JobDataSrv/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobDataSrvClient) GetSalaryDataBySeniority(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*SalaryResponse, error) {
	out := new(SalaryResponse)
	err := c.cc.Invoke(ctx, "/JobDataSrv/GetSalaryDataBySeniority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobDataSrvServer is the server API for JobDataSrv service.
// All implementations must embed UnimplementedJobDataSrvServer
// for forward compatibility
type JobDataSrvServer interface {
	Count(context.Context, *StandardRequest) (*CountResponse, error)
	GetSalaryDataBySeniority(context.Context, *StandardRequest) (*SalaryResponse, error)
	mustEmbedUnimplementedJobDataSrvServer()
}

// UnimplementedJobDataSrvServer must be embedded to have forward compatible implementations.
type UnimplementedJobDataSrvServer struct {
}

func (UnimplementedJobDataSrvServer) Count(context.Context, *StandardRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedJobDataSrvServer) GetSalaryDataBySeniority(context.Context, *StandardRequest) (*SalaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalaryDataBySeniority not implemented")
}
func (UnimplementedJobDataSrvServer) mustEmbedUnimplementedJobDataSrvServer() {}

// UnsafeJobDataSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobDataSrvServer will
// result in compilation errors.
type UnsafeJobDataSrvServer interface {
	mustEmbedUnimplementedJobDataSrvServer()
}

func RegisterJobDataSrvServer(s grpc.ServiceRegistrar, srv JobDataSrvServer) {
	s.RegisterService(&JobDataSrv_ServiceDesc, srv)
}

func _JobDataSrv_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobDataSrvServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobDataSrv/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobDataSrvServer).Count(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobDataSrv_GetSalaryDataBySeniority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobDataSrvServer).GetSalaryDataBySeniority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobDataSrv/GetSalaryDataBySeniority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobDataSrvServer).GetSalaryDataBySeniority(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobDataSrv_ServiceDesc is the grpc.ServiceDesc for JobDataSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobDataSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JobDataSrv",
	HandlerType: (*JobDataSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _JobDataSrv_Count_Handler,
		},
		{
			MethodName: "GetSalaryDataBySeniority",
			Handler:    _JobDataSrv_GetSalaryDataBySeniority_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job-data.proto",
}
